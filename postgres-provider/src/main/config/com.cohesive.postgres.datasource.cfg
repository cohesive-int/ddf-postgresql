#####################################################
# (c) Copyright 2012 Cohesive Integrations, LLC
#
# Property File containing the postgres datasource 
# configuration information. The Datasource software
# that is leveraged for pooling is BoneCP, more details
# can be found at:  http://jolbox.com/
#
#####################################################

# the JDBC URL to for connection to the database
jdbcUrl=jdbc:postgresql://localhost:5432/ddf

# The user to connect to the database as
username=postgres

# The password associated with the database user name
# Can be encrypted or unencrypted
# If encrypting then the encrypted value should be put between 
# the parenthesis ENC(PUT_PASSWORD_HERE}.  For example if the 
# encrypted password has a value of ASD#J123% then the property
# would look like:
# postgres.password=ENC(ASD#J123%) 
password=password

# The time (in minutes), for a connection to remain idle 
# before sending a test query to the DB
idleConnectionTestPeriodInMinutes=15

# The time (in minutes), for a connection to remain unused 
# before it is closed off
idleMaxAgeInMinutes=60

# Sets the maximum number of connections that will be contained
# in every partition. Setting this to 5 with 3 partitions means
# you will have 15 unique connections to the database. Note that
# the connection pool will not create all these connections in one
# go but rather start off with minConnectionsPerPartition and 
#gradually increase connections as required. 
maxConnectionsPerPartition=20

# Sets number of partitions to use. In order to reduce lock 
# contention and thus improve performance, each incoming connection
# request picks off a connection from a pool that has thread-affinity, 
# i.e. pool[threadId % partition_count]. The higher this number, the 
# better your performance will be for the case when you have plenty
# of short-lived threads. Beyond a certain threshold, maintenance of 
# these pools will start to have a negative effect on performance 
# (and only for the case when connections on a partition start running out).
# Recommended: 2-4 (but very app specific)
partitionCount=3

# When the available connections are about to run out, new ones
# will dynamically create new ones in batches. This property 
# controls how many new connections to create in one go (up to 
# a maximum of maxConnectionsPerPartition). 
acquireIncrement=5

# The number of statements to cache. 
statementsCacheSize=100


